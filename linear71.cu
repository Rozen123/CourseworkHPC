#include <stdio.h>
#include <math.h>
#include <time.h>
#include <unistd.h>
#include <cuda_runtime_api.h>
#include <errno.h>
#include <unistd.h>

/******************************************************************************
 * The variable names and the function names of this program is same as provided by the university.
  The added variable and function are the only changes made to this program. 


 * To compile:
 *   nvcc -o linear71 linear71.cu -lm
 * 
 * To run:
 *   .linear71
 * 
 *****************************************************************************/

typedef struct point_t {
  double x;
  double y;
} point_t;

int n_data = 1000;
__device__ int d_n_data = 1000;


point_t data[] = {
  {82.45,150.46},{73.37,99.47},{67.74,139.29},{72.16,137.58},
  {65.30,145.07},{82.16,148.47},{68.67,112.49},{83.79,161.36},
  {84.52,153.89},{82.08,158.44},{69.99,135.14},{84.51,176.33},
  {84.99,146.73},{79.83,129.63},{78.61,141.50},{89.46,147.77},
  {16.10,54.34},{87.86,157.44},{89.36,165.13},{84.25,131.40},
  {73.76,149.11},{53.37,120.23},{32.65,80.70},{18.11,57.29},
  {84.26,139.52},{ 4.02,31.04},{59.09,109.06},{46.13,100.14},
  {76.03,129.01},{38.20,90.55},{51.02,107.44},{58.19,97.79},
  {88.59,150.85},{20.60,71.77},{ 8.19,35.78},{ 9.61,50.48},
  {28.89,67.91},{ 4.93,35.28},{82.06,149.40},{57.92,116.68},
  {58.45,100.27},{51.00,122.47},{28.30,53.49},{64.45,138.54},
  {99.53,170.09},{ 5.92,27.31},{ 3.65,54.86},{70.12,132.64},
  {50.44,100.13},{90.40,165.35},{48.92,94.82},{11.87,53.15},
  {37.57,98.49},{65.17,119.66},{48.86,102.35},{45.86,90.97},
  {38.81,78.45},{37.59,85.70},{87.53,164.66},{29.07,67.13},
  {18.12,58.70},{50.96,99.24},{15.15,63.11},{70.18,121.80},
  {63.62,113.14},{90.83,166.13},{ 4.48,38.81},{38.43,83.31},
  {72.79,133.26},{22.38,51.73},{25.67,59.25},{14.05,55.24},
  {44.69,97.15},{90.25,140.25},{88.51,157.93},{97.80,185.98},
  {74.47,154.67},{48.49,114.02},{ 7.20,41.63},{54.57,114.41},
  {54.65,112.13},{95.78,163.85},{ 4.82,35.68},{71.40,131.67},
  {11.40,51.12},{37.04,99.79},{95.18,161.77},{ 5.14,35.58},
  { 5.35,28.90},{93.87,159.07},{72.62,141.94},{25.04,67.60},
  {43.67,86.51},{85.14,155.38},{31.43,72.91},{31.01,86.90},
  {35.43,82.49},{26.74,65.60},{78.68,145.54},{41.48,90.48},
  {77.98,139.46},{42.61,96.09},{92.86,153.84},{83.90,163.50},
  {27.63,80.20},{47.65,108.56},{10.11,38.32},{25.69,61.91},
  {79.83,137.06},{39.61,86.60},{97.25,169.45},{35.94,96.42},
  {60.77,130.01},{80.21,149.73},{23.90,66.45},{52.74,103.05},
  {43.25,104.00},{76.81,129.03},{72.16,146.33},{91.57,172.00},
  {68.48,141.40},{51.54,87.27},{ 7.90,28.89},{99.68,172.75},
  {48.65,93.73},{24.68,76.75},{ 3.18,33.86},{59.69,116.68},
  {67.10,147.15},{44.65,84.57},{43.59,90.99},{ 9.62,45.49},
  {54.99,108.47},{72.77,148.88},{40.38,99.03},{14.45,55.98},
  {88.97,167.83},{98.54,145.79},{61.04,120.12},{67.05,132.16},
  {17.75,59.44},{ 5.30,34.23},{72.98,153.51},{99.80,175.07},
  {29.63,68.05},{98.58,159.80},{17.02,51.63},{18.25,54.00},
  {80.48,154.23},{45.47,92.53},{56.03,90.58},{46.51,86.95},
  {88.97,159.83},{86.26,157.77},{91.91,162.33},{54.43,111.82},
  { 2.13,47.66},{ 6.77,54.06},{85.91,159.88},{33.62,85.45},
  {93.44,172.84},{20.76,65.09},{70.34,140.93},{49.11,98.04},
  {43.81,76.76},{70.57,146.91},{18.42,56.31},{95.09,173.61},
  {68.52,119.41},{47.42,116.42},{ 5.23,30.90},{32.31,79.12},
  {41.39,95.35},{10.93,54.52},{19.69,49.72},{24.60,75.56},
  {99.21,179.99},{13.97,71.15},{97.12,160.40},{13.17,52.07},
  {99.66,179.48},{42.25,95.17},{83.49,156.19},{16.75,42.31},
  { 1.19,31.66},{30.88,72.10},{98.60,178.99},{55.81,117.71},
  {62.12,142.23},{ 6.09,43.64},{33.40,89.36},{81.87,154.61},
  {74.97,139.11},{76.52,135.44},{55.19,106.92},{37.78,84.16},
  {67.76,110.83},{15.71,39.34},{91.60,184.65},{18.83,45.24},
  {73.15,154.11},{33.47,72.68},{44.80,100.12},{ 6.50,41.71},
  { 9.66,59.27},{27.93,77.67},{24.80,93.83},{71.50,129.30},
  {20.16,65.98},{27.35,72.63},{24.46,61.75},{41.88,69.19},
  {78.69,158.61},{33.13,96.07},{97.98,171.91},{ 9.89,48.68},
  { 1.34,45.10},{59.90,116.53},{20.14,57.09},{49.07,102.98},
  {46.92,115.94},{61.01,125.38},{87.14,166.83},{91.70,161.23},
  {90.08,170.42},{13.00,55.30},{80.93,147.78},{28.70,93.04},
  {69.04,147.93},{89.94,172.60},{61.30,115.17},{74.46,147.75},
  {56.55,107.46},{12.22,60.93},{32.25,63.82},{ 9.32,60.44},
  {75.08,132.97},{ 8.92,49.90},{79.65,164.98},{53.12,105.06},
  {40.37,99.92},{52.24,116.34},{ 8.85,61.77},{51.50,101.92},
  {90.31,160.07},{43.49,97.16},{31.20,70.18},{81.02,154.89},
  {57.10,128.57},{74.12,134.28},{ 6.27,44.36},{84.68,158.06},
  {74.94,125.55},{ 0.23,45.24},{ 7.73,45.36},{ 8.93,36.47},
  {94.15,177.63},{78.43,133.83},{93.15,158.88},{60.61,91.13},
  {64.42,131.71},{63.01,137.62},{35.84,86.80},{ 5.15,51.39},
  {96.12,173.38},{83.83,171.12},{51.39,97.40},{90.82,148.25},
  {87.51,156.62},{71.48,141.47},{92.40,159.31},{35.89,96.75},
  {12.32,45.29},{65.13,133.50},{ 7.64,39.79},{64.49,112.83},
  {89.26,156.30},{ 2.35,53.20},{ 5.07,34.59},{36.59,75.43},
  {77.92,147.01},{34.31,92.54},{51.65,140.84},{47.25,108.69},
  {42.22,82.24},{20.37,72.83},{48.01,84.07},{30.45,81.64},
  {58.80,113.41},{26.91,55.19},{78.30,140.41},{ 6.98,45.92},
  {26.01,60.72},{ 4.42,36.07},{71.08,131.95},{81.60,156.62},
  { 8.93,47.32},{59.53,113.25},{ 3.56,45.70},{50.12,110.80},
  {68.30,128.99},{88.05,159.94},{17.20,76.09},{22.38,69.46},
  {72.05,132.57},{46.85,96.47},{11.24,56.53},{21.07,50.74},
  {69.14,145.04},{86.10,161.68},{54.67,99.95},{14.54,48.03},
  {29.46,87.63},{36.10,94.68},{55.03,119.65},{97.51,176.48},
  {55.71,108.25},{29.61,90.29},{51.74,117.78},{62.49,121.29},
  {66.30,107.38},{92.40,169.05},{29.66,88.33},{56.89,101.63},
  { 0.86,28.51},{46.99,95.14},{52.63,107.20},{ 9.93,45.14},
  {34.71,78.83},{66.92,136.88},{49.73,92.20},{35.79,78.41},
  { 3.45,50.39},{92.21,169.34},{63.55,129.44},{66.98,123.98},
  {78.31,160.26},{ 9.27,37.60},{16.41,64.02},{14.91,56.34},
  {73.28,146.50},{62.49,121.64},{11.70,65.29},{61.13,109.80},
  {83.59,165.03},{47.86,95.75},{75.44,148.32},{19.49,56.86},
  {83.96,136.91},{11.02,67.19},{73.54,137.23},{37.79,100.37},
  {74.12,136.21},{49.02,90.01},{ 4.20,35.61},{22.98,80.18},
  {15.13,59.46},{74.24,135.97},{64.98,138.07},{95.38,156.99},
  { 0.96,28.27},{49.79,101.80},{45.05,106.94},{72.87,104.34},
  {80.08,158.58},{39.09,90.44},{22.85,55.77},{86.01,132.94},
  {12.97,30.27},{ 3.72,39.84},{21.37,59.85},{ 3.98,40.09},
  {88.17,167.27},{79.47,145.00},{22.85,83.02},{ 8.66,46.37},
  {42.42,99.25},{11.51,60.26},{88.50,165.19},{65.09,137.74},
  {72.93,131.02},{61.01,129.67},{31.07,71.19},{58.85,106.86},
  {26.45,64.04},{29.21,84.58},{ 6.09,34.60},{ 2.96,50.09},
  {79.23,136.63},{ 8.64,45.47},{89.34,162.17},{42.91,93.76},
  {77.13,149.70},{36.17,90.02},{54.36,103.91},{89.87,156.14},
  {58.97,127.01},{85.82,167.12},{43.68,113.21},{47.36,109.83},
  { 2.62,38.18},{46.64,116.74},{16.62,46.72},{35.65,84.88},
  {76.72,130.41},{26.28,77.58},{72.79,146.30},{59.98,110.93},
  {66.07,124.68},{85.44,133.49},{44.78,83.32},{44.14,88.36},
  { 5.17,30.16},{54.43,122.15},{61.50,115.96},{21.49,57.14},
  {26.45,77.08},{64.23,105.45},{96.23,166.31},{48.37,95.50},
  {84.28,160.74},{98.90,169.24},{30.67,66.89},{34.27,85.43},
  {16.94,45.96},{56.26,128.66},{51.00,112.17},{47.93,120.55},
  {69.30,143.53},{88.95,160.75},{88.39,164.59},{ 5.94,39.42},
  {14.26,68.73},{63.02,128.11},{60.71,112.67},{77.12,144.23},
  {42.26,97.65},{71.03,149.69},{10.37,54.94},{ 3.46,41.17},
  {92.48,164.09},{ 8.15,35.01},{68.11,124.03},{99.93,182.90},
  {86.28,164.63},{95.83,166.15},{ 5.67,57.96},{85.12,150.47},
  {20.81,75.35},{ 2.59,40.69},{53.80,111.01},{86.91,158.82},
  {23.57,56.59},{81.75,164.38},{22.17,59.22},{72.09,137.26},
  {76.61,164.72},{73.93,131.06},{64.89,147.15},{ 8.26,52.98},
  {77.28,152.49},{74.15,147.38},{80.35,144.15},{45.37,93.04},
  {31.15,72.72},{95.41,166.56},{82.85,162.74},{93.12,165.29},
  {66.67,129.25},{81.84,137.06},{42.81,102.39},{19.62,57.08},
  {27.05,69.89},{66.96,141.64},{80.14,154.82},{77.71,151.39},
  {98.02,165.87},{43.25,92.91},{64.00,118.43},{27.21,59.42},
  {34.62,95.82},{18.73,66.30},{16.38,47.23},{13.72,53.03},
  { 2.76,21.18},{84.93,153.77},{87.44,166.99},{ 5.58,37.23},
  {93.82,166.99},{32.88,90.43},{44.83,111.28},{17.33,71.84},
  {29.59,87.74},{52.50,110.19},{ 2.02,23.13},{10.42,49.94},
  {94.00,183.68},{30.99,84.86},{76.77,141.52},{26.08,73.37},
  {74.59,126.67},{13.91,61.98},{76.54,131.08},{59.96,129.10},
  {46.40,106.89},{97.62,151.55},{74.51,111.40},{34.75,73.16},
  {80.71,154.75},{66.20,128.03},{13.94,40.50},{18.57,58.34},
  {16.96,56.97},{81.41,133.03},{11.74,58.02},{65.24,111.10},
  {64.42,132.46},{47.07,91.53},{ 9.49,48.83},{30.62,67.99},
  {14.26,44.08},{35.54,85.62},{18.04,72.29},{28.95,98.30},
  {65.53,128.21},{31.80,80.17},{48.19,107.79},{91.82,178.72},
  { 2.61,50.99},{ 9.41,46.78},{11.75,50.23},{86.25,152.75},
  {84.82,137.10},{21.75,66.19},{51.42,117.08},{27.45,78.20},
  { 7.55,46.34},{40.18,99.96},{48.38,97.02},{90.71,166.49},
  {40.21,104.86},{85.96,144.13},{28.45,62.57},{87.00,156.68},
  {14.76,52.01},{12.73,54.05},{ 8.40,30.53},{55.90,124.27},
  {93.82,161.77},{ 7.36,47.71},{81.45,153.81},{15.87,48.68},
  {65.15,126.32},{94.02,164.99},{51.32,98.69},{12.18,53.95},
  {28.58,76.38},{75.81,131.24},{40.06,73.89},{56.95,102.56},
  { 5.27,37.99},{83.67,142.75},{16.28,52.91},{20.70,35.76},
  {87.65,148.45},{37.53,84.93},{38.38,71.71},{21.87,70.15},
  {98.43,156.15},{13.14,72.22},{ 0.89,21.83},{54.30,96.47},
  {28.05,93.27},{40.06,73.92},{85.33,155.67},{78.39,135.43},
  {78.29,143.53},{ 6.68,48.63},{56.66,108.28},{41.08,72.70},
  {78.96,147.93},{37.57,83.89},{79.31,145.44},{92.11,150.70},
  {73.61,138.09},{27.58,63.65},{36.89,95.39},{73.65,134.42},
  {21.40,75.96},{76.09,134.54},{66.79,128.97},{98.25,173.49},
  {64.78,125.65},{94.15,150.48},{99.28,166.74},{97.23,169.32},
  {20.06,65.36},{61.51,119.94},{ 4.02,58.03},{32.71,72.40},
  {81.34,156.62},{42.73,84.31},{11.80,42.08},{61.37,114.16},
  {99.06,181.94},{94.37,179.24},{52.27,116.42},{30.87,90.80},
  {42.79,80.80},{93.69,147.33},{67.38,124.88},{22.36,63.47},
  {49.43,117.10},{54.68,116.87},{99.67,193.00},{69.77,147.92},
  {24.28,67.29},{49.86,100.41},{78.37,140.32},{78.03,147.24},
  {18.21,61.72},{19.16,72.31},{81.68,153.39},{93.83,159.35},
  {76.59,130.68},{52.08,108.48},{59.24,114.10},{90.89,168.10},
  { 3.30,42.02},{10.55,43.70},{46.92,100.26},{63.08,119.95},
  {70.84,134.26},{60.76,125.73},{55.62,109.24},{15.46,73.05},
  {74.23,149.27},{26.60,82.40},{ 4.14,47.33},{72.49,127.61},
  {41.11,93.62},{95.12,162.74},{ 5.18,44.31},{54.34,104.63},
  { 8.05,30.00},{90.51,162.95},{45.71,90.03},{37.49,77.03},
  {97.78,166.18},{52.21,119.75},{14.49,47.90},{23.31,58.51},
  {24.29,67.32},{33.72,67.31},{ 8.56,41.46},{94.59,174.77},
  {66.20,130.36},{28.39,76.43},{20.89,71.19},{85.45,136.79},
  {85.61,142.45},{27.67,55.12},{41.29,86.29},{29.28,69.04},
  {57.25,122.80},{ 6.56,45.30},{60.20,112.25},{84.09,144.25},
  {97.82,157.26},{ 1.62,47.22},{37.40,76.17},{19.42,59.38},
  {83.74,143.04},{81.13,150.39},{87.22,166.45},{50.60,108.20},
  {70.05,147.53},{47.80,94.15},{45.91,105.79},{61.78,120.52},
  {13.11,72.56},{37.43,99.42},{37.85,85.91},{15.87,57.76},
  {65.49,140.24},{14.11,58.28},{11.31,59.60},{24.80,69.36},
  {36.63,93.58},{91.21,147.99},{61.08,146.80},{35.48,58.34},
  {54.82,113.98},{80.93,155.58},{56.82,107.15},{38.92,86.13},
  {94.78,184.70},{79.23,139.92},{86.01,152.59},{57.01,121.54},
  {39.58,96.26},{81.79,149.19},{17.44,42.42},{96.55,163.99},
  {96.33,171.38},{66.48,127.35},{83.03,142.27},{21.57,74.86},
  {63.00,118.36},{32.87,90.04},{16.13,51.71},{88.11,155.17},
  { 7.40,29.32},{35.76,103.34},{11.21,65.18},{94.18,150.83},
  {23.18,85.51},{55.22,117.37},{31.87,64.39},{54.25,111.38},
  {56.52,111.22},{74.89,152.23},{98.31,193.90},{28.02,62.20},
  {69.85,114.81},{51.99,98.74},{ 7.96,49.10},{77.78,141.76},
  {12.15,44.59},{30.91,62.88},{38.67,82.49},{28.22,69.36},
  {68.52,138.65},{ 5.79,30.43},{68.09,132.39},{42.05,95.70},
  {22.47,66.77},{98.94,170.71},{ 2.21,41.82},{ 4.23,36.85},
  {72.95,130.22},{ 5.72,39.85},{18.98,59.65},{82.71,164.52},
  {25.76,84.61},{45.00,100.59},{52.37,121.13},{94.86,183.47},
  {99.24,184.57},{25.70,71.98},{38.77,92.04},{32.30,93.67},
  {92.81,176.51},{59.70,127.12},{49.47,111.06},{32.27,93.66},
  {51.23,113.48},{86.92,155.44},{19.42,52.61},{ 4.23,55.05},
  {14.55,47.34},{31.44,77.54},{38.96,97.88},{90.82,146.84},
  {90.21,160.70},{20.25,73.58},{65.81,126.12},{85.24,166.37},
  {18.43,78.38},{61.83,122.91},{96.43,173.09},{35.20,77.21},
  {94.27,179.72},{38.66,93.33},{59.81,120.63},{22.72,55.84},
  {95.34,171.29},{ 7.10,45.24},{10.56,43.26},{59.61,129.82},
  {85.38,141.68},{81.49,133.59},{16.78,57.23},{27.71,65.19},
  {34.88,73.94},{49.09,92.77},{49.75,105.73},{91.65,158.88},
  {70.73,151.27},{18.05,68.53},{95.34,170.00},{76.50,133.10},
  { 2.33,31.45},{60.03,102.32},{13.60,53.89},{52.12,97.60},
  {58.80,127.56},{20.34,54.56},{15.48,56.33},{40.91,93.16},
  {20.99,65.23},{76.05,128.21},{71.45,137.84},{29.67,86.72},
  {43.66,84.36},{89.82,148.28},{48.44,106.55},{50.31,93.99},
  {13.38,61.45},{49.11,102.92},{38.02,85.42},{10.03,45.76},
  {11.30,46.16},{47.14,92.08},{16.51,46.01},{62.51,126.00},
  {69.96,149.33},{55.16,110.34},{72.40,120.72},{ 2.51,44.67},
  {69.40,125.13},{ 3.01,37.43},{17.79,60.57},{15.87,58.84},
  { 1.35,44.57},{42.39,105.71},{89.37,154.86},{55.35,129.53},
  { 8.80,47.82},{18.08,61.18},{15.11,63.97},{24.54,63.57},
  {76.89,153.13},{ 5.35,29.49},{14.11,45.19},{36.72,92.87},
  {83.69,167.04},{91.54,156.23},{18.21,59.17},{69.03,127.84},
  {79.85,139.89},{74.79,145.94},{74.70,137.21},{96.06,172.21},
  {35.03,89.17},{76.02,143.77},{61.20,112.20},{94.85,169.84},
  {23.73,57.48},{ 9.52,53.46},{ 2.20,33.52},{89.67,150.08},
  {22.35,81.01},{60.50,118.26},{75.89,126.14},{63.18,118.22},
  {89.71,154.73},{19.60,36.96},{96.58,177.52},{53.72,114.16},
  {72.10,148.54},{ 5.22,34.93},{ 4.59,31.68},{77.37,137.07},
  {34.25,83.15},{77.21,143.58},{66.03,127.89},{79.36,143.24},
  {50.58,113.56},{53.20,91.02},{40.28,102.91},{33.55,70.36},
  {84.86,136.18},{92.14,166.33},{20.87,73.45},{19.78,50.49},
  {60.79,133.64},{35.19,78.95},{36.78,89.51},{79.79,152.32},
  {77.03,153.89},{62.22,119.01},{30.27,73.10},{68.55,139.53},
  {78.63,155.84},{70.57,141.69},{21.34,62.09},{13.82,61.04},
  {57.71,125.42},{70.10,135.80},{33.75,71.82},{ 8.10,24.70},
  { 7.97,20.36},{99.62,177.94},{61.96,124.03},{59.84,86.03},
  { 6.92,25.96},{58.05,93.59},{19.87,51.04},{52.27,95.82},
  {78.97,149.47},{97.92,167.61},{50.73,95.03},{33.97,69.40},
  {49.57,92.86},{91.48,171.48},{85.74,150.32},{57.90,131.07},
  {76.31,135.99},{ 3.18,39.17},{89.70,174.49},{24.76,80.90},
  {98.38,180.22},{72.31,134.82},{98.30,167.99},{60.53,133.04},
  {17.61,61.16},{91.45,167.76},{96.45,190.83},{27.35,79.14},
  {44.17,95.88},{84.85,154.04},{65.51,133.25},{55.81,99.39},
  {30.97,100.98},{72.66,149.76},{ 6.61,46.97},{72.24,141.63},
  {32.62,86.42},{94.97,149.19},{34.26,83.94},{67.17,122.29},
  {10.06,54.72},{26.55,81.33},{ 1.42,42.87},{57.35,108.15},
  {83.56,168.69},{66.75,126.86},{21.58,50.05},{29.57,78.12},
  {90.77,156.82},{99.23,180.95},{53.72,96.08},{18.60,66.55},
  {34.47,90.78},{16.06,73.57},{45.18,92.22},{39.41,89.93},
  {45.16,106.32},{88.85,180.75},{41.20,87.77},{27.75,49.39},
  {11.75,40.45},{ 8.14,42.90},{91.19,155.95},{52.97,91.85},
  {98.85,172.11},{70.94,129.96},{63.27,115.87},{81.61,165.53},
  {61.87,139.53},{88.25,165.17},{32.01,74.16},{30.38,68.49},
  {39.41,101.93},{41.57,91.22},{63.90,120.81},{87.25,151.40},
  {42.66,96.20},{25.67,80.13},{87.04,145.31},{55.69,102.92},
  {10.13,61.05},{ 7.92,44.48},{34.58,73.42},{73.13,137.99},
  {40.21,90.86},{72.55,132.36},{15.85,48.75},{49.42,106.04},
  {88.93,166.91},{57.21,120.80},{45.50,96.14},{77.54,144.76},
  { 7.04,47.78},{33.27,69.61},{61.29,130.83},{34.89,97.04},
  {67.35,114.88},{14.56,41.19},{ 0.05,42.80},{11.91,62.81},
  {72.50,140.75},{29.16,67.27},{12.44,58.40},{70.85,139.97},
  {95.44,156.19},{53.73,110.00},{58.34,128.98},{24.20,69.91}
};

double residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

__device__ double d_residual_error(double x, double y, double m, double c) {
  double e = (m * x) + c - y;
  return e * e;
}

double rms_error(double m, double c) {
  int i;
  double mean;
  double error_sum = 0;
  
  for(i=0; i<n_data; i++) {
    error_sum += residual_error(data[i].x, data[i].y, m, c);
  }
  
  mean = error_sum / n_data;
  
  return sqrt(mean);
}

__global__ void d_rms_error(double *m, double *c, double *error_sum_arr, point_t *d_data) {

	int i = threadIdx.x + blockIdx.x * blockDim.x;

  error_sum_arr[i] = d_residual_error(d_data[i].x, d_data[i].y, *m, *c);
}

// Calculate the difference between two times. Returns zero on
// success and the time difference through an argument. It will 
// be unsuccessful if the start time is after the end time.

int time_difference(struct timespec *start, 
                    struct timespec *finish, 
                    long long int *difference) {
  long long int d_sec =  finish->tv_sec - start->tv_sec; 
  long long int d_nsec =  finish->tv_nsec - start->tv_nsec; 

  if(d_nsec < 0 ) {
    d_sec--;
    d_nsec += 1000000000; 
  } 
  *difference = d_sec * 1000000000 + d_nsec;
  return !(*difference > 0);
}

int main() {
  int i;
  double bm = 1.3;
  double bc = 10;
  double be;
  double dm[8];
  double dc[8];
  double e[8];
  double step = 0.01;
  double best_error = 999999999;
  int best_error_i;
  int minimum_found = 0;
  
  double om[] = {0,1,1, 1, 0,-1,-1,-1};
  double oc[] = {1,1,0,-1,-1,-1, 0, 1};

	struct timespec start, finish;   
  long long int time_elapsed;

	
  clock_gettime(CLOCK_MONOTONIC, &start);

	cudaError_t error;

	
  double *d_dm;
  double *d_dc;
	double *d_error_sum_arr;
	point_t *d_data;
	
  be = rms_error(bm, bc);

	
	error = cudaMalloc(&d_dm, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dm returned %d %s\n", error,
    	cudaGetErrorString(error));
   	exit(1);
 	}
	
	
	error = cudaMalloc(&d_dc, (sizeof(double) * 8));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_dc returned %d %s\n", error,
  	  cudaGetErrorString(error));
   	exit(1);
 	}
	
	
	error = cudaMalloc(&d_error_sum_arr, (sizeof(double) * 1000));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_error_sum_arr returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

	
	error = cudaMalloc(&d_data, sizeof(data));
 	if(error){
   	fprintf(stderr, "cudaMalloc on d_data returned %d %s\n", error,
   	  cudaGetErrorString(error));
   	exit(1);
 	}

  while(!minimum_found) {
    for(i=0;i<8;i++) {
      dm[i] = bm + (om[i] * step);
      dc[i] = bc + (oc[i] * step);    
    }

		
  	error = cudaMemcpy(d_dm, dm, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dm returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		
  	error = cudaMemcpy(d_dc, dc, (sizeof(double) * 8), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_dc returned %d %s\n", error,
      cudaGetErrorString(error));
  	}

		
  	error = cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);  
  	if(error){
    	fprintf(stderr, "cudaMemcpy to d_data returned %d %s\n", error,
      cudaGetErrorString(error));
  	}
		
    for(i=0;i<8;i++) {
			
			double h_error_sum_arr[1000];
			double error_sum_total;
			double error_sum_mean;
			d_rms_error <<<100,10>>>(&d_dm[i], &d_dc[i], d_error_sum_arr, d_data);
			cudaThreadSynchronize();
		  error = cudaMemcpy(&h_error_sum_arr, d_error_sum_arr, (sizeof(double) * 1000), cudaMemcpyDeviceToHost);  
		  if(error){
	    fprintf(stderr, "cudaMemcpy to error_sum returned %d %s\n", error,
	      cudaGetErrorString(error));
		  }
			for(int j=0; j<n_data; j++) {
    		error_sum_total += h_error_sum_arr[j];
  		}

			error_sum_mean = error_sum_total / n_data;
			e[i] = sqrt(error_sum_mean);

      if(e[i] < best_error) {
        best_error = e[i];
        best_error_i = i;
      }

			error_sum_total = 0;
    }


    if(best_error < be) {
      be = best_error;
      bm = dm[best_error_i];
      bc = dc[best_error_i];
    } else {
      minimum_found = 1;
    }
  }

	error = cudaFree(d_dm);
	if(error){
		fprintf(stderr, "cudaFree on d_dm returned %d %s\n", error,
	  	cudaGetErrorString(error));
		exit(1);
	}
	
	error = cudaFree(d_dc);
	if(error){
		fprintf(stderr, "cudaFree on d_dc returned %d %s\n", error,
			cudaGetErrorString(error));
		exit(1);
	}

	error = cudaFree(d_data);
	if(error){
		fprintf(stderr, "cudaFree on d_data returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}
		
	error = cudaFree(d_error_sum_arr);
	if(error){
		fprintf(stderr, "cudaFree on d_error_sum_arr returned %d %s\n", error,
	  	cudaGetErrorString(error));
	 	exit(1);
	}

  printf("minimum m,c is %lf,%lf with error %lf\n", bm, bc, be);

	clock_gettime(CLOCK_MONOTONIC, &finish);

  time_difference(&start, &finish, &time_elapsed);

  printf("Time elapsed was %lldns or %0.9lfs\n", time_elapsed, 
         (time_elapsed/1.0e9));
	
  return 0;
}
